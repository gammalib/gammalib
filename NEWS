New Features and Important Changes in GammaLib 1.3.0.dev1

Author(s) : Juergen Knoedlseder

4 April 2017


1. Introduction
---------------
This document briefly summarizes module by module the most important changes
made since the last release of GammaLib.


2. Public interface modifications
---------------------------------
The following classes have been added:
- GWcsGLS
- GWcsSFL
- GModelSpectralSmoothBrokenPlaw

The following classes have been removed:
- ...

The following classes have been renamed:
- ...

The following methods have been added:
- GCTAResponseIrf::rspname
- GCTARoi::contains
- GCTAEdisp2D::fetch
- GEbounds::set
- GEnergies::set

The following methods have been removed:
- ...

The following methods have been renamed:
- ...

The arguments for the following methods have been changed:
- ...

The return value of the following methods has been changed:
- ...


3. Configuration
-----------------
The Python unit tests now raise exceptions instead of exiting with a non-
zero return code so that the user is not thrown out of Python after calling
gammalib.test() (#1983).


4. Application module
---------------------
None


5. Base module
--------------
None


6. FITS I/O Interface
---------------------
None


7. Linear algebra module
------------------------
None


8. Model module
---------------
<<<<<<< 75428cb593eb469cbb2c5e92cd69369745621430
<<<<<<< a04a0c419578a4a97a02adb16951d2025d2adfba
Sky directions drawn by GModelSpatialDiffuseConst::mc() are now restricted
to the simulation cone that has previously been defined using the mc_norm()
method. This speeds up considerbly the Monte Carlo simulations for an
isotropic diffuse model (#1674). 

The GModelSpectral eval() and eval_gradients() methods use an empty GTim()
object as default time argument since all spectral models are so far time-
independent. This avoids that a user needs to specify a dummy time argument
(#1672).

The set_mc_cone() methods of the GModelSpatialDiffuseCube class and the
GModelSpatialDiffuseMap class now recompute only the Monte Carlo acceptance
cone in case that the cone centre or radius have changed since the last
computation. This speeds up the computations (#1673).

The GModelSpectralPlaw2 class has been renamed to GModelSpectralPlawPhotonFlux
and the integral() methods were renamed to flux(). A new class
GModelSpectralPlawEnergyFlux has been added that handles integral energy
fluxes as opposed to GModelSpectralPlawPhotonFlux that handles integral
photon fluxes. Unit tests have been added for the new class (#1790).

The GModelSpectralExpInvPlaw class has been added that uses a cut-off
parameter instead of a cut-off energy for the exponentially cut-off
power law. The cut-off parameter is the inverse of the cut-off energy
(#1800).

The GModelSpectralMultiplicative class has been added that implements the
product of spectral model components as a new spectral model (#1861).

The GModelSpectralComposite and GModelSpatialComposite classes have been
added that implement composite spectral and spatial models, which are sums
of models as a new model component (#1706).

A region() method has been added to the GModelSpatial base class and all
derived classes that returns a pointer to a sky region that bounds the
spatial model. For the moment, only circular sky regions have been
implemented (#1764).

<<<<<<< 1136c32c5b08f8fea14ee2e0d1898f5f6e5c72a0
<<<<<<< 07173c405cafbc8d89c98b9c0a90a52c9a0ee0ab
Add GModelSpatialRadialProfile class to handle arbitrary radial profiles.
The method deals with pre-computation and normalization of the profiles,
and implements the eval(), eval_grandients() and mc() method. The class
GModelSpatialRadialProfileGauss has been added to show how to implement
radial profile for the case of a Gaussian, and also to cross-check the
results with the GModelSpatialRadialGauss class that should return basically
the same results (#1520).

The GModelSpatialDiffuseCube::mc() method now uses a rejection method for
simulating sky directions, which makes the MC method identical to the model
evaluation method, using in both cases a log-log interpolation. The simulation
cone is now used for Monte Carlo simulations (#1722).

Also the GModelSpatialDiffuseMap::mc() method now uses a rejection method for
simulating sky directions (#1725).

The methods spatial(), spectral() and temporal() have been added to GModelSky
to allow setting of model components.

Private methods GModel::read_attributes() and GModel::write_attributes() have
been added to centralize the reading and writing of model attributes. These
methods are now called at all relevant places, reducing code duplication and
assuring that all attributes are correctly read by all classes and constructors
(#1765).

The GModelSpatialDiffuseMap, GModelSpatialDiffuseCube and GModelSpectralFunc
class now support the specifications of file names that are relative to the
XML file (#1808).

The spatial model components have been renamed to enhance the readability and
to make them more homogenous. The Fermi/LAT Science Tools should also evolve
to support the new names:
* "PointSource" (alias: "SkyDirFunction")
* "RadialDisk" (alias: "DiskFunction")
* "RadialGaussian" (alias: "GaussFunction")
* "RadialShell" (alias: "ShellFunction")
* "EllipticalDisk"
* "EllipticalGaussian" (alias: "EllipticalGauss")
* "DiffuseIsotropic" (alias: "ConstantValue")
* "DiffuseMap" (alias: "SpatialMap")
* "DiffuseMapCube" (alias: "MapCubeFunction")
By default the old model names are still supported. Support of the old model
names can be turned off by specifying the --disable-legacy-model-names option
to the ./configure script (#1818).

The model classes now write the same XML element names than those that were read
in. In that way a maximum legacy for the Fermi/LAT data format is assured (#1820).

The spectral registry class now also checks for model parameter names which allows
to have models of the same type but with different parameters in the registry
(#1824). The interface for the GModelSpectralRegistry::alloc() method has been
changed so that it no longer takes a name string but an XML element. The same has
been done for the GModelSpatialRegistry and GModelTemporalRegistry classes so that
more general model definition XML file handling can be implemented.

The names of some spectral model components have been modified to be more
explicit and homogenous:
* "Constant" (was "ConstantValue")
* "PowerLaw" (combines "PowerLaw" and "PowerLaw2")
* "BrokenPowerLaw"
* "ExponentialCutoffPowerLaw" (was "ExpCutoff")
* "SuperExponentialCutoffPowerLaw" (was "PLSuperExpCutoff")
* "Gaussian"
* "LogParabola"
* "FileFunction"
* "NodeFunction"
By default the old model names are still supported. Support of the old model
names can be turned off by specifying the --disable-legacy-model-names option
to the ./configure script (#1821).
=======
The GModelTemporalFunc class has been added to implement a temporal file
function for the simulation of transient sources. A unit test has been
added and the mc() and eval() methods have been validated using a dedicated
test script (#1914).
>>>>>>> Add GModelTemporalFunc class (#1914)
=======
The GModelTemporalLightCurve class has been added to implement a light
curve as temporal component of a model. The light curve is defined by
nodes in a FITS file. It can be used for the simulation of transient
sources. A unit test has been added and the mc() and eval() methods
have been validated using a dedicated test script (#1914).
>>>>>>> Rename GModelTemporalFunc to GModelTemporalLightCurve

The GModelSpatialDiffuseMap::mc and GModelSpatialDiffuseCube::mc methods
now throw an GException::invalid_return_value exception that is catched
in the GModelSky::mc method and leads to the skipping of the concerned
photon. This allows handling of empty diffuse maps or map cubes (#1915).

The GModelTemporalPhaseCurve class has been added to impelement a phase
curve as temporal component of a model. The phase curve can be used to
model pulsar light curves or the temporal variation of gamma-ray binaries
(#1916).
=======
None
>>>>>>> Add GWcsGLS and GWcsSFL classes to support GLS and SFL WCS (#1851)
=======
The GModelSpectralNodes class now throws an exception if the energy or
intensity of a node is set to a non-positive value (#990).
>>>>>>> GModelSpectralNodes throws exception for non-positive energy or intensity (#990)

The GModelSpectralSmoothBrokenPlaw class that implements a smoothly broken
power law spectrum has been added (#1948).


9. Numerics module
------------------
None


10. Observation module
----------------------
A set() method has been added to GEbounds and GEnergies to allow converting
energy boundaries into an energy container and vice versa. In addition,
conversion constructors have been added (#1977).


11. Optimization module
-----------------------
None


12. Sky module
--------------
The GWcsGLS and GWcsSFL classes have been added to support the GLS and SFL
World Coordinate System projections (#1851).

The GWcs base class now also supports CD keywords instead of CDELT keywords
(#1951).


13. Support module
------------------
None


14. XML module
--------------
None


15. VO module
-------------
None


16. Xspec module
----------------
None


17. Test module
---------------
None


18. Multi-wavelength interface
------------------------------
None


19. Fermi-LAT interface
----------------------
None


20. CTA interface
-----------------
Correct the containment radius computation in GCTAPsf2D (#1876).

<<<<<<< e5273b1bc5555d288c392209930e187b0d086474
The GCTAResponseIrf::rspname method has been added that returns the name
of the response function (attribute m_rspname).
=======
Do no longer interpret a CTA calibration database as a file path in the
GCTAResponseIrf::read() method (#1969).
>>>>>>> Do no longer interpret a CTA calibration database as file path in GCTAResponseIrf::read (#1969)

Add GCTARoi::contains() method that checks whether an instrument direction
is contained within the region of interest.

Lazy loading of the energy dispersion in GCTAEdisp2D has been implemented by
adding a fetch() method to the class. Now the energy dispersion is only loaded
when needed, for example for function evaluation or Monte Carlo sampling (#1940).

The GCTAEdisp2D::compute_ebounds_src method now loops over the migration to
enhance the precision in the true energy boundaries that are returned by this
method. In addition, the validity range of the table is now stored in members
of the class, and a non-zero energy dispersion is only returned for valid
elements of the response table.


21. COMPTEL interface
---------------------
None
